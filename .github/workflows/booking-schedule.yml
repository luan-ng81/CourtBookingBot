name: Court Booking Automation

on:
  # Run on schedule (cron syntax: minute hour day month day-of-week)
  # Day of week: 0 = Sunday, 4 = Thursday
  # Pacific Time: PDT (UTC-7) Mar-Nov, PST (UTC-8) Nov-Mar
  # Running at both 07:00 and 08:00 UTC to cover both PST and PDT
  schedule:
    # Thursday at 00:00 AM PDT (07:00 AM UTC) - Book 8:00 PM to 10:00 PM (13 days ahead)
    - cron: '0 7 * * 4'
    # Thursday at 00:00 AM PST (08:00 AM UTC) - Book 8:00 PM to 10:00 PM (13 days ahead)
    - cron: '0 8 * * 4'
    # Sunday at 00:00 AM PDT (07:00 AM UTC) - Book 2:00 PM to 4:00 PM (13 days ahead)
    - cron: '0 7 * * 0'
    # Sunday at 00:00 AM PST (08:00 AM UTC) - Book 2:00 PM to 4:00 PM (13 days ahead)
    - cron: '0 8 * * 0'
    # TEMPORARY TEST: Friday at 00:00 AM PDT (07:00 AM UTC) - Remove after testing
    - cron: '0 7 * * 5'
    # Friday at 12:45 PM PDT (19:45 UTC) - Book 5:00 AM to 7:00 AM (13 days ahead)
    - cron: '45 19 * * 5'
    # Friday at 12:45 PM PST (20:45 UTC) - Book 5:00 AM to 7:00 AM (13 days ahead)
    - cron: '45 20 * * 5'

  # Allow manual trigger from GitHub Actions UI
  workflow_dispatch:
    inputs:
      booking_ahead_days:
        description: 'Days ahead to book (override config)'
        required: false
        type: number
      preferred_time:
        description: 'Preferred time (override config)'
        required: false
        type: string

jobs:
  book-court:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait 7 seconds to hit 00:00:07 timing
      run: sleep 7

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          playwright-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps chromium

    - name: Check if correct timezone trigger
      id: tz-check
      run: |
        # Get current hour in UTC
        CURRENT_HOUR=$(date -u +%H)

        # Determine if we're in PDT (UTC-7) or PST (UTC-8)
        # PDT: Second Sunday in March to First Sunday in November
        # For simplicity, check if current hour matches expected run time

        # Get current date in America/Los_Angeles timezone
        export TZ=America/Los_Angeles
        LA_HOUR=$(date +%H)

        echo "Current UTC hour: $CURRENT_HOUR"
        echo "Current LA hour: $LA_HOUR"

        # Only proceed if LA time is 00:xx (midnight) or 12:xx (noon)
        if [ "$LA_HOUR" = "00" ] || [ "$LA_HOUR" = "12" ]; then
          echo "SHOULD_RUN=true" >> $GITHUB_ENV
          echo "LA_RUN_HOUR=$LA_HOUR" >> $GITHUB_ENV
          echo "✓ Correct time - proceeding with booking (LA hour: $LA_HOUR)"
        else
          echo "SHOULD_RUN=false" >> $GITHUB_ENV
          echo "✗ Wrong timezone offset - skipping (LA hour: $LA_HOUR)"
          exit 0
        fi

    - name: Determine booking time based on day
      if: env.SHOULD_RUN == 'true' || github.event_name == 'workflow_dispatch'
      id: booking-time
      run: |
        # For manual triggers, always use the input if provided
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.preferred_time }}" ]; then
          echo "PREFERRED_TIME=${{ github.event.inputs.preferred_time }}" >> $GITHUB_ENV
          echo "Manual trigger - using specified time: ${{ github.event.inputs.preferred_time }}"
        else
          # For scheduled runs, determine time based on day of week and hour
          export TZ=America/Los_Angeles
          DAY_OF_WEEK=$(date +%u)  # 1=Monday, 4=Thursday, 5=Friday, 7=Sunday
          RUN_HOUR="${LA_RUN_HOUR:-00}"  # Get the hour we're running at (00 for midnight, 12 for noon)

          if [ "$DAY_OF_WEEK" = "4" ]; then
            # Thursday - Book 8:00 PM to 10:00 PM
            echo "PREFERRED_TIME=08:00 PM" >> $GITHUB_ENV
            echo "Booking for Thursday: 8:00 PM to 10:00 PM"
          elif [ "$DAY_OF_WEEK" = "7" ]; then
            # Sunday - Book 2:00 PM to 4:00 PM
            echo "PREFERRED_TIME=02:00 PM" >> $GITHUB_ENV
            echo "Booking for Sunday: 2:00 PM to 4:00 PM"
          elif [ "$DAY_OF_WEEK" = "5" ]; then
            # Friday - check if midnight or noon run
            if [ "$RUN_HOUR" = "12" ]; then
              # Friday noon - Book 5:00 AM to 7:00 AM
              echo "PREFERRED_TIME=05:00 AM" >> $GITHUB_ENV
              echo "Booking for Friday (noon run): 5:00 AM to 7:00 AM"
            else
              # Friday midnight (TEST RUN) - Book 8:00 PM to 10:00 PM
              echo "PREFERRED_TIME=08:00 PM" >> $GITHUB_ENV
              echo "TEST RUN - Booking for Friday: 8:00 PM to 10:00 PM"
            fi
          else
            # Other days - use default
            echo "PREFERRED_TIME=08:00 PM" >> $GITHUB_ENV
            echo "Default time: 8:00 PM to 10:00 PM"
          fi
        fi

    - name: Validate environment variables
      if: env.SHOULD_RUN == 'true' || github.event_name == 'workflow_dispatch'
      env:
        CITYSPORTS_USERNAME: ${{ secrets.CITYSPORTS_USERNAME }}
        CITYSPORTS_PASSWORD: ${{ secrets.CITYSPORTS_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        BOOKING_AHEAD_DAYS: ${{ github.event.inputs.booking_ahead_days || '13' }}
      run: |
        python validate_env.py

    - name: Run booking bot
      if: env.SHOULD_RUN == 'true' || github.event_name == 'workflow_dispatch'
      env:
        CITYSPORTS_USERNAME: ${{ secrets.CITYSPORTS_USERNAME }}
        CITYSPORTS_PASSWORD: ${{ secrets.CITYSPORTS_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        # Override with workflow inputs if provided
        BOOKING_AHEAD_DAYS: ${{ github.event.inputs.booking_ahead_days || '13' }}
        # PREFERRED_TIME is set in the previous step
      run: |
        python booking_bot.py

    - name: Upload error screenshots (if any)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-screenshots
        path: error_*.png
        if-no-files-found: ignore
        retention-days: 7

    - name: Notify on failure
      if: failure()
      run: |
        echo "::error::Court booking failed! Check the logs and screenshots."
